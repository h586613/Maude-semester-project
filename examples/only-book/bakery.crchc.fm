  ---- from the book All About Maude
  ---- by the Maude team

fmod NEW-BOOL is
  sort NewBool  .
  ops tt ff : -> NewBool [ctor] .
endfm

fmod NATURAL is
   protecting NEW-BOOL .
  sort Nat .
  op 0 : -> Nat [ctor] .
  op s_ : Nat -> Nat [ctor] .
  op _<_ : Nat Nat -> NewBool .
  vars N M : Nat .
  eq N < 0 = ff .
  eq 0 < s(M) = tt .
  eq s N < s M = N < M .
endfm

fmod SATISFACTION is protecting NEW-BOOL .
  sorts State Prop .
  op _|=_ : State Prop -> NewBool [frozen] .
endfm

  mod BAKERY is
    protecting NATURAL .
    sorts Mode BState .
    ops sleep wait crit : -> Mode [ctor] .
    op <_,_,_,_> : Mode Nat Mode Nat -> BState [ctor] .

    op initial : -> BState .
    eq initial = < sleep, 0, sleep, 0 > .

    vars P Q : Mode .
    vars X Y : Nat .

    rl [p1_sleep] : < sleep, X, Q, Y > => < wait, s Y, Q, Y > .
    rl [p1_wait] : < wait, X, Q, 0 > => < crit, X, Q, 0 > .
    crl [p1_wait] : < wait, X, Q, Y > => < crit, X, Q, Y >
      if (Y < X) = ff .
    rl [p1_crit] : < crit, X, Q, Y > => < sleep, 0, Q, Y > .

    rl [p2_sleep] : < P, X, sleep, Y > => < P, X, wait, s X > .
    rl [p2_wait] : < P, 0, wait, Y > => < P, 0, crit, Y > .
    crl [p2_wait] : < P, X, wait, Y > => < P, X, crit, Y >
      if Y < X  = tt .
    rl [p2_crit] : < P, X, crit, Y > => < P, X, sleep, 0 > .
  endm
