---- from the book All About Maude
---- by the Maude team

fmod MULTISET{X :: TRIV} is
  protecting NAT .

  sort Mset{X} .
  subsort X$Elt < Mset{X} .

  op empty : -> Mset{X} [ctor] .
  op __ : Mset{X} Mset{X} -> Mset{X} [ctor assoc comm id: empty] .

  op isEmpty : Mset{X} -> Bool .
  op size : Mset{X} -> Nat .

  vars E E' : X$Elt .
  vars S S' : Mset{X} .

  eq isEmpty(empty) = true .
  eq isEmpty(E S) = false .

  eq size(empty) = 0 .
  eq size(E S) = 1 + size(S) .

  op isIn : X$Elt Mset{X} -> Bool .
  op mult : X$Elt Mset{X} -> Nat .

  eq isIn(E, E S) = true .
  eq isIn(E, S) = false [owise] .

  eq mult(E, E S) = 1 + mult(E, S) .
  eq mult(E, S) = 0 [owise] .

  op delete : X$Elt Mset{X} -> Mset{X} .
  op delete1 : X$Elt Mset{X} -> Mset{X} .

  eq delete(E, E S) = delete(E, S) .
  eq delete(E, S) = S [owise] .

  eq delete1(E, E S) = S .
  eq delete1(E, S) = S [owise] .

  op intersection : Mset{X} Mset{X} -> Mset{X} .
  op difference : Mset{X} Mset{X} -> Mset{X} .

  eq intersection(E S, E S') = E intersection(S, S') .
  eq intersection(S, S') = empty [owise] .

  eq difference(E S, E S') = difference(S, S') .
  eq difference(S, S') = S [owise] .
endfm

fmod MULTISET-TEST is
  protecting MULTISET{Int} .
endfm

eof

red mult(2, 2 2 1 2 3 2) .
---(
reduce in MULTISET-TEST : mult(2, 2 2 1 2 2 3) .
rewrites: 9 in 0ms cpu (0ms real) (~ rewrites/second)
result NzNat: 4
---)

red intersection(2 2 3 4, 2 2 1 3 3 2) .
---(
reduce in MULTISET-TEST : intersection(2 2 3 4, 2 2 1 3 2 3) .
rewrites: 4 in 0ms cpu (0ms real) (~ rewrites/second)
result Mset{Int}: 2 2 3
---)

red difference(2 2 3 4, 2 2 1 3 3 2) .
---(
reduce in MULTISET-TEST : difference(2 2 3 4, 2 2 1 3 2 3) .
rewrites: 4 in 0ms cpu (0ms real) (~ rewrites/second)
result NzNat: 4
---)
