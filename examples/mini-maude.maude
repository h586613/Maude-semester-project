---- from the book All About Maude
---- from the Maude Manual
---- by the Maude team

load mini-maude-syntax.maude

fmod MINI-MAUDE is
  protecting META-LEVEL .

  vars T T1 T2 T3 : Term .
  vars TL TL' : TermList .
  var  QI : Qid .
  var  QIL : QidList .
  var  F : Qid .
  var  M : Module .
  var  I : Import .
  vars IL : ImportList .
  var  S : Sort .
  vars SS : SortSet .
  var  SsS : SubsortDeclSet .
  var  OD : OpDecl .
  var  ODS : OpDeclSet .
  var  MbS : MembAxSet .
  vars EqS EqS' : EquationSet .

  op processModule : Term ~> FModule .
  eq processModule(T) = solveBubbles(T, extractSignature(T)) .

  ---- extractSignature
  op extractSignature : Term ~> FModule .
  op extractSignature : Term FModule ~> FModule .
  eq extractSignature('fmod_is_endfm['token[QI], T])
   = extractSignature(T,
       fmod downTerm(QI, 'error) is nil sorts none . none none none none endfm) .

  eq extractSignature('__[T1, T2], M)
   = extractSignature(T2, extractSignature(T1, M)) .
  eq extractSignature('sort_.['token[T]], M) = addSort(M, downTerm(T, 'error)) .
  eq extractSignature('op_:_->_.['token[T1], 'neTokenList[TL], 'token[T2]], M)
   = addOpDecl(M, 
       op downTerm(T1, 'error) : downTerm(TL, nil) -> downTerm(T2, 'error) [none] .) .
  eq extractSignature('op_:`->_.['token[T1], 'token[T2]], M)
   = addOpDecl(M, (op downTerm(T1, 'error) : nil -> downTerm(T2, 'error) [none] .)) .
  eq extractSignature('including_.['token[T]], M)
   = addImport(M, including downTerm(T, 'error) .) .
  eq extractSignature(T, M) = M [owise] .

  ---- solveBubbles
  op solveBubbles : Term FModule ~> FModule .
  op solveBubblesAux : Term FModule ~> EquationSet .

  eq solveBubbles('fmod_is_endfm['token[QI], T], M)
    = addEquations(M, solveBubblesAux(T, M)) .

  eq solveBubblesAux('eq_=_.[T1, T2], M)
    = (eq getTerm(processTerm(T1, M)) = getTerm(processTerm(T2, M)) [none] .) .
  eq solveBubblesAux('__['eq_=_.[T1, T2], T3], M)
    = (eq getTerm(processTerm(T1, M)) = getTerm(processTerm(T2, M)) [none] .
       solveBubblesAux(T3, M)) .
  ceq solveBubblesAux('__[F[TL], T2], M)
    = solveBubblesAux(T2, M)
    if F =/= 'eq_=_. .
  ceq solveBubblesAux(F[TL], M)
    = none
    if F =/= '__ /\ F =/= 'eq_=_. .

  op processTerm : Term Module ~> ResultPair .
  eq processTerm('bubble[T], M)
    = metaParse(M, downTerm(T, nil), anyType) .

  op addSort : FModule Sort -> FModule .
  eq addSort(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, S)
   = fmod QI is IL sorts SS ; S . SsS ODS MbS EqS endfm .

  op addOpDecl : FModule OpDecl -> FModule .
  eq addOpDecl(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, OD)
   = fmod QI is IL sorts SS . SsS (OD ODS) MbS EqS endfm .

  op addImport : FModule Import -> FModule .
  eq addImport(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, I)
   = fmod QI is IL I sorts SS . SsS ODS MbS EqS endfm .

  op addEquations : FModule EquationSet -> FModule .
  eq addEquations(fmod QI is IL sorts SS . SsS ODS MbS EqS endfm, EqS')
   = fmod QI is IL sorts SS . SsS ODS MbS (EqS EqS') endfm .
endfm

eof


Maude> red in MINI-MAUDE :
            extractSignature(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'sort 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's '0 '= '0 '.
               'endfm,
               'PreModule))) .
rewrites: 22 in 2ms cpu (4ms real) (7399 rewrites/second)
result FModule: fmod 'NAT3 is
  nil
  sorts 'Nat3 .
  none
  op '0 : nil -> 'Nat3 [none] .
  op 's_ : 'Nat3 -> 'Nat3 [none] .
  none
  none
endfm

Maude> red in MINI-MAUDE :
            processModule(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'sort 'Nat3 '.
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's '0 '= '0 '.
               'endfm,
               'PreModule))) .
rewrites: 42 in 0ms cpu (1ms real) (46614 rewrites/second)
result FModule: fmod 'NAT3 is
  nil
  sorts 'Nat3 .
  none
  op '0 : nil -> 'Nat3 [none] .
  op 's_ : 'Nat3 -> 'Nat3 [none] .
  none
  eq 's_['s_['s_['0.Nat3]]] = '0.Nat3 [none] .
endfm

Maude> red in MINI-MAUDE :
            processModule(
              getTerm(metaParse(upModule('MINI-MAUDE-SYNTAX, false),
               'fmod 'NAT3 'is
                  'sort 'Nat3 '.
                  'op 's_ ': 'Nat3 '-> 'Nat3 '.
                  'op '0 ': '-> 'Nat3 '.
                  'eq 's 's 's 'N:Nat3 '= 'N:Nat3 '.
               'endfm,
               'PreModule))) .
result FModule: fmod 'NAT3 is
  nil
  sorts 'Nat3 .
  none
  op '0 : nil -> 'Nat3 [none] .
  op 's_ : 'Nat3 -> 'Nat3 [none] .
  none
  eq 's_['s_['s_['N:Nat3]]] = 'N:Nat3 [none] .
endfm
