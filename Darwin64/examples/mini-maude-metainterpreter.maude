---- Meta-interpreter+I/O-based execution environment for MiniMaude.
---- Inputs do not require parentheses.
---- Modules must be written inside mod_is_endfm, and only sort and op decls and eq
---- One command available: reduce_.
---- See examples at the end of this file.
---- Notice the eof, copy and paste the text to pass it to Maude.

sload maybe.maude
sload mini-maude.maude
sload mini-maude-syntax.maude
sload file.maude
sload metaInterpreter.maude
sload view-oid.maude

view Module from TRIV to META-MODULE is
  sort Elt to Module .
endv

omod MINI-MAUDE-META-INTERPRETER is
  pr MINI-MAUDE .
  inc STD-STREAM .
  inc LEXICAL .
  inc MAYBE{Oid} * (op maybe{Oid} to null) .
  inc MAYBE{Qid} * (op maybe{Qid} to null) .
  inc MAYBE{Module} * (op maybe{Module} to null) .
  inc META-INTERPRETER .

  vars O O' MI Y : Oid .
  var  Atts : AttributeSet .
  var  QIL : QidList .
  var  Str : String .
  vars T T' : Term .
  vars Ty Ty' : Type .
  var  N : Nat .
  var  RP? : [ResultPair] .
  var  M : Module .
  var  M? : Maybe{Module} .
  vars QI? : Maybe{Qid} .
  vars QI MN : Qid .
  var  EqS : EquationSet .

  class MiniMaude | mi : Maybe{Oid}, ---- meta-interpreter
                    mn : Maybe{Qid}, ---- defeault module name
                    in : QidList,    ---- accumulated input
                    st : Nat .       ---- state

  op processInput : Oid Term -> Msg .
  op pendingBubbles : Oid Term -> Msg .
  op parsedEquations : Oid EquationSet -> Msg .
  op processReduce : Oid [ResultPair] -> Msg .

  op o : -> Oid .
  op minimaude : -> Configuration .

  eq minimaude
   = <>
     < o : MiniMaude | mi : null, mn : null, in : nil, st : 0 >
     write(stdout, o, "\t MiniMaude Execution Environment\n")
     createInterpreter(interpreterManager, o, none) .

  rl < O : MiniMaude | mi : null, st : 0 >
     wrote(O, O')
     createdInterpreter(O, Y, MI)
  => < O : MiniMaude | mi : MI, st : 1 >
     insertModule(MI, O, upModule('MINI-MAUDE-SYNTAX, true)) .

  rl < O : MiniMaude | mi : MI, st : 1 >
     insertedModule(O, O')
  => < O : MiniMaude | mi : MI, st : 2 >
     getLine(stdin, O, "minimaude> ") .

  rl < O : MiniMaude | mi : MI, in : QIL, st : 2 >
     gotLine(O, O', Str)
  => if tokenize(Str) == 'quit or tokenize(Str) == 'q
     then < O : MiniMaude | mi : MI, in : nil, st : 3 >
          write(stdout, o, "goodbye\n")
          quit(MI, O)
     else < O : MiniMaude | mi : MI, in : QIL tokenize(Str), st : 4 >
          parseTerm(MI, O, 'MINI-MAUDE-SYNTAX, none, QIL tokenize(Str), 'Input)
     fi .

  rl < O : MiniMaude | mi : MI, st : 3 >
     wrote(O, O')
     bye(O, MI)
  => none .

  rl < O : MiniMaude | mi : MI, in : QIL, st : 4 >
     parsedTerm(O, MI, {T, Ty})
  => < O : MiniMaude | mi : MI, in : nil, st : 6 >
     processInput(O, T) .

  rl < O : MiniMaude | mi : MI, in : QIL, st : 4 >
     parsedTerm(O, MI, noParse(N))
  => if N == size(QIL)
     then < O : MiniMaude | mi : MI, in : QIL, st : 2 >
          getLine(stdin, O, "> ")
     else < O : MiniMaude | mi : MI, in : nil, st : 5 >
          write(stdout, o, "Parse error\n")
     fi .

  rl < O : MiniMaude | mi : MI, in : QIL, st : 4 >
     parsedTerm(O, MI, ambiguity({T, Ty}, {T', Ty'}))
  => < O : MiniMaude | mi : MI, in : nil, st : 5 >
     write(stdout, o, "Ambiguous input\n") .

  rl < O : MiniMaude | mi : MI, mn : QI?, st : 6 >
     processInput(O, 'fmod_is_endfm['token[T], T'])
  => if extractSignature('fmod_is_endfm['token[T], T']) :: Module
     then < O : MiniMaude | mi : MI, mn : downTerm(T, 'default-name), st : 7 >
          insertModule(MI, O, extractSignature('fmod_is_endfm['token[T], T']))
          pendingBubbles(O, T')
     else < O : MiniMaude | mi : MI, mn : QI?, st : 5 >
          write(stdout, o, "Parse error\n")
     fi .

  rl < O : MiniMaude | mi : MI, mn : QI, st : 7 >
     insertedModule(O, MI)
  => < O : MiniMaude | mi : MI, mn : QI, st : 8 >
     showModule(MI, O, QI, true) .

  rl < O : MiniMaude | mi : MI, mn : QI, st : 8 >
     showingModule(O, MI, M)
     pendingBubbles(O, T)
  => if solveBubblesAux(T, M) :: EquationSet
     then < O : MiniMaude | mi : MI, mn : QI, st : 9 >
          parsedEquations(O, solveBubblesAux(T, M))
          showModule(MI, O, QI, false)
     else < O : MiniMaude | mi : MI, mn : QI, st : 5 >
          write(stdout, o, "Parse error\n")
     fi .

  rl < O : MiniMaude | mi : MI, mn : QI, st : 9 >
     showingModule(O, MI, M)
     parsedEquations(O, EqS)
  => < O : MiniMaude | mi : MI, mn : QI, st : 10 >
     insertModule(MI, O, addEquations(M, EqS)) .

  rl < O : MiniMaude | mi : MI, st : 10 >
     insertedModule(O, MI)
  => < O : MiniMaude | mi : MI, st : 5 >
     write(stdout, O, "Module loaded successfully\n") .

  rl < O : MiniMaude | mi : MI, st : 5 >
     wrote(O, O')
  => < O : MiniMaude | mi : MI, st : 2 >
     getLine(stdin, O, "minimaude> ") .

  rl < O : MiniMaude | mn : null, st : 6 >
     processInput(O, 'reduce_.[T])
  => < O : MiniMaude | mn : null, st : 5 >
     write(stdout, o, "No module in the system\n") .

  rl < O : MiniMaude | mi : MI, mn : MN, st : 6 >
     processInput(O, 'reduce_.['bubble[T]])
  => < O : MiniMaude | mi : MI, mn : MN, st : 11 >
     parseTerm(MI, O, MN, none, downTerm(T, nil), anyType) .

  rl < O : MiniMaude | mi : MI, mn : MN, st : 11 >
     parsedTerm(O, MI, {T, Ty})
  => < O : MiniMaude | mi : MI, mn : MN, st : 12 >
     reduceTerm(MI, O, MN, T) .

  rl < O : MiniMaude | mi : MI, mn : MN, st : 11 >
     parsedTerm(O, MI, noParse(N))
  => < O : MiniMaude | mi : MI, st : 5 >
     write(stdout, o, "Parse error\n") .

  rl < O : MiniMaude | mi : MI, mn : MN, st : 12 >
     reducedTerm(O, MI, N, T, Ty)
  => < O : MiniMaude | mi : MI, mn : MN, st : 13 >
     reducedTerm(O, MI, N, T, Ty)
     printTerm(MI, O, MN, none, T, mixfix flat format number rat) .

  rl < O : MiniMaude | mi : MI, st : 13 >
     reducedTerm(O, MI, N, T, Ty)
     printedTerm(O, MI, QIL)
  => < O : MiniMaude | mi : MI, st : 5 >
     write(stdout, o, "result " + string(Ty) + ": " + printTokens(QIL) + "\n") .
endom

eof

set trace on .
set print conceal on .
print conceal fmod_is____endfm .

Maude> erew minimaude .
         MiniMaude Execution Environment
minimaude> 

minimaude> fmod NAT3 is
             sort Nat3 .
             op s_ : Nat3 -> Nat3 .
             op 0 : -> Nat3 .
             eq s s s 0 = 0 .
           endfm
Module loaded successfully
minimaude> 

minimaude> reduce s s s s 0 .
result Nat3: s 0
minimaude>

minimaude> fmod NAT3+ is
             including NAT3 .
             op _+_ : Nat3 Nat3 -> Nat3 .
             eq 0 + N:Nat3 = N:Nat3 .
             eq s N:Nat3 + M:Nat3 = s (N:Nat3 + M:Nat3) .
           endfm
Module loaded successfully
minimaude>

minimaude> reduce s s 0 + s 0 .
result Nat3: 0
minimaude>

minimaude> reduce foo .
Parse error
minimaude>

minimaude> q
goodbye
Advisory: deleting interpreter(0)
rewrites: 631 in 34ms cpu (203988ms real) (18252 rewrites/second)
result Portal: <>
Maude>