---- from the book All About Maude
---- from the Maude Manual
---- by the Maude team

load vending-machine-signature.maude

mod VENDING-MACHINE is
  including VENDING-MACHINE-SIGNATURE .
  var M : Marking .
  rl [add-q] : M => M q .
  rl [add-$] : M => M $ .
  rl [buy-c] : $ => c .
  rl [buy-a] : $ => a q .
  rl [change] : q q q q => $ .
endm

***(
Maude> show sorts VENDING-MACHINE .
sort Bool .
sort Coin .	subsort Coin < Marking .
sort Item .	subsort Item < Marking .
sort Marking .	subsorts Item Coin < Marking .

Maude> show rls VENDING-MACHINE .
rl M => q M [label add-q] .
rl M => $ M [label add-$] .
rl $ => c [label buy-c] .
rl $ => q a [label buy-a] .
rl q q q q => $ [label change] .

Maude> rew [1] in VENDING-MACHINE : $ $ q q .
rewrite [1] in VENDING-MACHINE : $ $ q q .
rewrites: 1 in 0ms cpu (29ms real) (~ rewrites/second)
result Marking: $ $ q q q

Maude> rew [2] $ $ q q .
rewrite [2] in VENDING-MACHINE : $ $ q q .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ q q q

Maude> rew [3] $ $ q q .
rewrite [3] in VENDING-MACHINE : $ $ q q .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ q q q q

Maude> rew [4] $ $ q q .
rewrite [4] in VENDING-MACHINE : $ $ q q .
rewrites: 4 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ $ q q q q

Maude> rew [5] $ $ q q .
rewrite [5] in VENDING-MACHINE : $ $ q q .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ $ $

Maude> rew [6] $ $ q q .
rewrite [6] in VENDING-MACHINE : $ $ q q .
rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ $ $ q

Maude> rew [200] $ $ q q .
rewrite [200] in VENDING-MACHINE : $ $ q q .
rewrites: 200 in 0ms cpu (1ms real) (~ rewrites/second)
result Marking: $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $
    $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $
    $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $ $
    $ $ $ $ $ q q q
)

mod VENDING-MACHINE-TOP is
  including VENDING-MACHINE-SIGNATURE .
  var M : Marking .
  rl [add-q] : M => M q .
  rl [add-$] : M => M $ .
  rl [buy-c] : $ M => c M .
  rl [buy-a] : $ M => a q M .
  rl [change]: q q q q => $ .
endm

***(
Maude> rew [2] in VENDING-MACHINE-TOP : $ $ q q .
Advisory: "vending-machine.maude", line 58 (mod VENDING-MACHINE-TOP): collapse
    at top of $ M may cause it to match more than you expect.
Advisory: "vending-machine.maude", line 59 (mod VENDING-MACHINE-TOP): collapse
    at top of $ M may cause it to match more than you expect.
rewrite [2] in VENDING-MACHINE-TOP : $ $ q q .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ $ q q q

Maude> rew [3] $ $ q q .
rewrite [3] in VENDING-MACHINE-TOP : $ $ q q .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ q q q c

Maude> rew [4] $ $ q q .
rewrite [4] in VENDING-MACHINE-TOP : $ $ q q .
rewrites: 4 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ q q q q a c

Maude> rew [5] $ $ q q .
rewrite [5] in VENDING-MACHINE-TOP : $ $ q q .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Marking: $ $ a c

Maude> frew [2] in VENDING-MACHINE : $ $ q q .
frewrite in VENDING-MACHINE : $ $ q q .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result (sort not calculated): ($ q) ($ $) q q

Maude> frew [12] $ $ q q .
frewrite in VENDING-MACHINE : $ $ q q .
rewrites: 12 in 0ms cpu (0ms real) (~ rewrites/second)
result (sort not calculated): c (q a) ($ q) ($ $) (q q) ($ q) (q q) q q

Maude> search [1] in VENDING-MACHINE : $ q q q =>+ a c c M:Marking .
search in VENDING-MACHINE : $ q q q =>+ a c c M .

Solution 1 (state 108)
states: 109  rewrites: 1857 in 0ms cpu (5ms real) (~ rewrites/second)
M --> q q q q

Maude> cont 1 .
Solution 2 (state 113)
states: 114  rewrites: 185 in 0ms cpu (1ms real) (~ rewrites/second)
M --> null

Maude> search [, 4] $ q q q =>+ a c c M:Marking .
search [, 4] in VENDING-MACHINE : $ q q q =>+ a c c M .

No solution.
states: 66  rewrites: 875 in 0ms cpu (2ms real) (~ rewrites/second)

Maude> search [4, 10] $ q q q =>+ a c c M:Marking .
search [4, 10] in VENDING-MACHINE : $ q q q =>+ a c c M .

Solution 1 (state 108)
states: 109  rewrites: 1857 in 0ms cpu (5ms real) (~ rewrites/second)
M --> q q q q

Solution 2 (state 113)
states: 114  rewrites: 2042 in 0ms cpu (6ms real) (~ rewrites/second)
M --> null

Solution 3 (state 160)
states: 161  rewrites: 3328 in 0ms cpu (9ms real) (~ rewrites/second)
M --> q q q q q

Solution 4 (state 164)
states: 165  rewrites: 3524 in 0ms cpu (9ms real) (~ rewrites/second)
M --> q

Maude> search [4, 10] $ q q q =>+ a c c M:Marking
           such that M:Marking =/= null .
search [4, 10] in VENDING-MACHINE : $ q q q =>+ a c c M such that M =/= null =
    true .

Solution 1 (state 108)
states: 109  rewrites: 1858 in 0ms cpu (5ms real) (~ rewrites/second)
M --> q q q q

Solution 2 (state 160)
states: 161  rewrites: 3331 in 0ms cpu (9ms real) (~ rewrites/second)
M --> q q q q q

Solution 3 (state 164)
states: 165  rewrites: 3528 in 0ms cpu (9ms real) (~ rewrites/second)
M --> q

Solution 4 (state 175)
states: 176  rewrites: 3904 in 0ms cpu (10ms real) (~ rewrites/second)
M --> $ q q q q

Maude> reduce in META-LEVEL : upEqs('VENDING-MACHINE, true) .
reduce in META-LEVEL : upEqs('VENDING-MACHINE, true) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result EquationSet: eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,'B:Bool],
    '_and_['A:Bool,'C:Bool]] [none] .
eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]]
    [none] .
eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,
    'B:Bool]] [none] .
eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .

Maude> reduce in META-LEVEL : upEqs('VENDING-MACHINE, false) .
reduce in META-LEVEL : upEqs('VENDING-MACHINE, false) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result EquationSet: (none).EquationSet

Maude> reduce in META-LEVEL : upRls('VENDING-MACHINE, true) .
reduce in META-LEVEL : upRls('VENDING-MACHINE, true) .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result RuleSet: rl '$.Coin => 'c.Item [label('buy-c)] .
rl '$.Coin => '__['q.Coin,'a.Item] [label('buy-a)] .
rl 'M:Marking => '__['$.Coin,'M:Marking] [label('add-$)] .
rl 'M:Marking => '__['q.Coin,'M:Marking] [label('add-q)] .
rl '__['q.Coin,'q.Coin,'q.Coin,'q.Coin] => '$.Coin [label('change)] .

Maude> reduce in META-LEVEL : upView('String0) .
result View:
    view 'String0 from 'DEFAULT to 'STRING is
      sort 'Elt to 'String .
      op '0.Elt to term '"".String .
    endv

Maude> reduce in META-LEVEL :
           metaRewrite(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['$.Coin, '__['q.Coin, 'q.Coin]]], 1) .
reduce in META-LEVEL : metaRewrite(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['$.Coin,'__['q.Coin,'q.Coin]]], 1) .
rewrites: 3 in 0ms cpu (28ms real) (~ rewrites/second)
result ResultPair: {'__['$.Coin,'$.Coin,'$.Coin,'q.Coin,'q.Coin],'Marking}

Maude> reduce in META-LEVEL :
           metaRewrite(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['$.Coin, '__['q.Coin, 'q.Coin]]], 2) .
reduce in META-LEVEL : metaRewrite(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['$.Coin,'__['q.Coin,'q.Coin]]], 2) .
rewrites: 4 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultPair: {'__['$.Coin,'$.Coin,'$.Coin,'q.Coin,'q.Coin,'q.Coin],
    'Marking}

Maude> reduce in META-LEVEL :
           metaFrewrite(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['$.Coin, '__['q.Coin, 'q.Coin]]],
             1, 1) .
reduce in META-LEVEL : metaFrewrite(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['$.Coin,'__['q.Coin,'q.Coin]]], 1, 1) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultPair: {'__['$.Coin,'q.Coin,'q.Coin,'c.Item],'Marking}

Maude> reduce in META-LEVEL :
           metaFrewrite(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['$.Coin, '__['q.Coin, 'q.Coin]]],
             12, 1) .
reduce in META-LEVEL : metaFrewrite(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['$.Coin,'__['q.Coin,'q.Coin]]], 12, 1) .
rewrites: 14 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultPair: {'__['$.Coin,'$.Coin,'$.Coin,'$.Coin,'$.Coin,'$.Coin,
    'q.Coin,'q.Coin,'q.Coin,'q.Coin,'q.Coin,'q.Coin,'q.Coin,'a.Item,'c.Item],
    'Marking}

Maude> reduce in META-LEVEL :
           metaApply(upModule('VENDING-MACHINE, false),
             '$.Coin, 'buy-c, none, 0) .
reduce in META-LEVEL : metaApply(upModule('VENDING-MACHINE, false), '$.Coin,
    'buy-c, none, 0) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultTriple: {'c.Item,'Item,(none).Substitution}

Maude> reduce in META-LEVEL :
           metaApply(upModule('VENDING-MACHINE, false),
             '$.Coin, 'add-$, none, 0) .
reduce in META-LEVEL : metaApply(upModule('VENDING-MACHINE, false), '$.Coin,
    'add-$, none, 0) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultTriple: {'__['$.Coin,'$.Coin],'Marking,
	'M:Marking <- '$.Coin}

Maude> reduce in META-LEVEL :
           metaApply(upModule('VENDING-MACHINE, false),
             '__['q.Coin, '$.Coin], 'buy-c, none, 0) .
reduce in META-LEVEL : metaApply(upModule('VENDING-MACHINE, false), '__[
    'q.Coin,'$.Coin], 'buy-c, none, 0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultTriple?: (failure).ResultTriple?

Maude> reduce in META-LEVEL :
           metaXapply(upModule('VENDING-MACHINE, false),
             '__['q.Coin, '$.Coin], 'buy-c, none, 0, unbounded, 0) .
reduce in META-LEVEL : metaXapply(upModule('VENDING-MACHINE, false), '__[
    'q.Coin,'$.Coin], 'buy-c, none, 0, unbounded, 0) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result Result4Tuple: {'__['q.Coin,'c.Item],'Marking,none,'__['q.Coin,[]]}

Maude> reduce in META-LEVEL :
           metaXapply(upModule('VENDING-MACHINE, false),
             '__['q.Coin, '$.Coin], 'buy-c, none, 0, unbounded, 1) .
reduce in META-LEVEL : metaXapply(upModule('VENDING-MACHINE, false), '__[
    'q.Coin,'$.Coin], 'buy-c, none, 0, unbounded, 1) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Result4Tuple?: (failure).Result4Tuple?

Maude> reduce in META-LEVEL :
           metaMatch(upModule('VENDING-MACHINE, false),
             '__['M:Marking, '$.Coin],
             '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
             nil, 0) .
reduce in META-LEVEL : metaMatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], nil, 0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Assignment:
	'M:Marking <- '__['q.Coin,'a.Item,'c.Item]

Maude> reduce metaMatch(upModule('VENDING-MACHINE, false),
                  '__['M:Marking, '$.Coin],
                  '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
                  nil, 1) .
reduce in META-LEVEL : metaMatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], nil, 1) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Substitution?: (noMatch).Substitution?

Maude> reduce metaXmatch(upModule('VENDING-MACHINE, false),
                  '__['M:Marking, '$.Coin],
                  '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
                  nil, 0, unbounded, 0) .
reduce in META-LEVEL : metaXmatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], nil, 0,
    unbounded, 0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result MatchPair: {
	'M:Marking <- '__['q.Coin,'a.Item,'c.Item],[]}

Maude> reduce metaXmatch(upModule('VENDING-MACHINE, false),
                  '__['M:Marking, '$.Coin],
                  '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
                  nil, 0, unbounded, 1) .
reduce in META-LEVEL : metaXmatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], nil, 0,
    unbounded, 1) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result MatchPair: {
	'M:Marking <- '__['a.Item,'c.Item],'__['q.Coin,[]]}

Maude> reduce metaMatch(upModule('VENDING-MACHINE, false),
                  '__['M:Marking, '$.Coin],
                  '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
                  'M:Marking = 'a.Item, 0) .
reduce in META-LEVEL : metaMatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], 'M:Marking =
    'a.Item, 0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Substitution?: (noMatch).Substitution?

Maude> reduce metaXmatch(upModule('VENDING-MACHINE, false),
                  '__['M:Marking, '$.Coin],
                  '__['$.Coin, 'q.Coin, 'a.Item, 'c.Item],
                  'M:Marking = 'a.Item, 0, unbounded, 0) .
reduce in META-LEVEL : metaXmatch(upModule('VENDING-MACHINE, false), '__[
    'M:Marking,'$.Coin], '__['$.Coin,'q.Coin,'a.Item,'c.Item], 'M:Marking =
    'a.Item, 0, unbounded, 0) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result MatchPair: {
	'M:Marking <- 'a.Item,'__['__['q.Coin,'c.Item],[]]}

Maude> reduce in META-LEVEL :
           metaSearch(upModule('VENDING-MACHINE, false),
             '__['$.Coin, 'q.Coin, 'q.Coin,'q.Coin],
             '__['c.Item, 'a.Item, 'c.Item, 'M:Marking],
             nil, '+, unbounded, 0) .
reduce in META-LEVEL : metaSearch(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'q.Coin,'q.Coin,'q.Coin], '__['c.Item,'a.Item,'c.Item,'M:Marking],
    nil, '+, unbounded, 0) .
metaSearch: visited 89 states.
rewrites: 1356 in 0ms cpu (4ms real) (~ rewrites/second)
result ResultTriple: {'__['q.Coin,'q.Coin,'q.Coin,'q.Coin,'a.Item,'c.Item,
    'c.Item],'Marking,
	'M:Marking <- '__['q.Coin,'q.Coin,'q.Coin,'q.Coin]}

Maude> reduce in META-LEVEL :
           metaSearch(upModule('VENDING-MACHINE, false),
             '__['$.Coin, 'q.Coin, 'q.Coin, 'q.Coin],
             '__['c.Item, 'a.Item, 'c.Item, 'M:Marking],
             nil, '+, unbounded, 1) .
reduce in META-LEVEL : metaSearch(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'q.Coin,'q.Coin,'q.Coin], '__['c.Item,'a.Item,'c.Item,'M:Marking],
    nil, '+, unbounded, 1) .
metaSearch: visited 106 states.
rewrites: 505 in 0ms cpu (1ms real) (~ rewrites/second)
result ResultTriple: {'__['a.Item,'c.Item,'c.Item],'Marking,
	'M:Marking <- 'null.Marking}

Maude> reduce in META-LEVEL :
           metaSearchPath(upModule('VENDING-MACHINE, false),
             '__['$.Coin, 'q.Coin, 'q.Coin,'q.Coin],
             '__['c.Item, 'a.Item, 'c.Item, 'M:Marking],
             nil, '+, unbounded, 0) .
reduce in META-LEVEL : metaSearchPath(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'q.Coin,'q.Coin,'q.Coin], '__['c.Item,'a.Item,'c.Item,'M:Marking],
    nil, '+, unbounded, 0) .
metaSearchPath: visited 89 states.
rewrites: 1356 in 0ms cpu (5ms real) (~ rewrites/second)
result Trace: {'__['$.Coin,'q.Coin,'q.Coin,'q.Coin],'Marking,rl 'M:Marking =>
    '__['$.Coin,'M:Marking] [label('add-$)] .}
{'__['$.Coin,'$.Coin,'q.Coin,'q.Coin,'q.Coin],'Marking,rl 'M:Marking => '__[
    '$.Coin,'M:Marking] [label('add-$)] .}
{'__['$.Coin,'$.Coin,'$.Coin,'q.Coin,'q.Coin,'q.Coin],'Marking,rl '$.Coin =>
    'c.Item [label('buy-c)] .}
{'__['$.Coin,'$.Coin,'q.Coin,'q.Coin,'q.Coin,'c.Item],'Marking,rl '$.Coin =>
    'c.Item [label('buy-c)] .}
{'__['$.Coin,'q.Coin,'q.Coin,'q.Coin,'c.Item,'c.Item],'Marking,rl '$.Coin =>
    '__['q.Coin,'a.Item] [label('buy-a)] .}

Maude> reduce in META-LEVEL :
           metaSearchPath(upModule('VENDING-MACHINE, false),
             '__['$.Coin, 'q.Coin, 'q.Coin, 'q.Coin],
             '__['c.Item, 'a.Item, 'c.Item, 'M:Marking],
             nil, '+, unbounded, 1) .
reduce in META-LEVEL : metaSearchPath(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'q.Coin,'q.Coin,'q.Coin], '__['c.Item,'a.Item,'c.Item,'M:Marking],
    nil, '+, unbounded, 1) .
metaSearchPath: visited 106 states.
rewrites: 505 in 0ms cpu (1ms real) (~ rewrites/second)
result Trace: {'__['$.Coin,'q.Coin,'q.Coin,'q.Coin],'Marking,rl 'M:Marking =>
    '__['$.Coin,'M:Marking] [label('add-$)] .}
{'__['$.Coin,'$.Coin,'q.Coin,'q.Coin,'q.Coin],'Marking,rl '$.Coin => 'c.Item [
    label('buy-c)] .}
{'__['$.Coin,'q.Coin,'q.Coin,'q.Coin,'c.Item],'Marking,rl '$.Coin => '__[
    'q.Coin,'a.Item] [label('buy-a)] .}
{'__['q.Coin,'q.Coin,'q.Coin,'q.Coin,'a.Item,'c.Item],'Marking,rl '__['q.Coin,
    'q.Coin,'q.Coin,'q.Coin] => '$.Coin [label('change)] .}
{'__['$.Coin,'a.Item,'c.Item],'Marking,rl '$.Coin => 'c.Item [label('buy-c)] .}

Maude> reduce in META-LEVEL :
           metaParse(upModule('VENDING-MACHINE, false),
             '$ 'q 'q 'q, 'Marking) .
reduce in META-LEVEL : metaParse(upModule('VENDING-MACHINE, false), '$ 'q 'q
    'q, 'Marking) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultPair: {'__['$.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]],'Marking}

Maude> reduce in META-LEVEL :
           metaParse(upModule('VENDING-MACHINE, false),
             '$ 'q 'd 'q, 'Marking) .
reduce in META-LEVEL : metaParse(upModule('VENDING-MACHINE, false), '$ 'q 'd
    'q, 'Marking) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result ResultPair?: noParse(2)

Maude> reduce in META-LEVEL :
           metaPrettyPrint(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['q.Coin, '__['q.Coin, 'q.Coin]]],
             none) .
reduce in META-LEVEL : metaPrettyPrint(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]], none) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result NeQidList: '__ '`( '$ '`, '__ '`( 'q '`, '__ '`( 'q '`, 'q '`) '`) '`)

Maude> reduce in META-LEVEL :
           metaPrettyPrint(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['q.Coin, '__['q.Coin, 'q.Coin]]],
             mixfix) .
reduce in META-LEVEL : metaPrettyPrint(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]], mixfix) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result NeTypeList: '$ 'q 'q 'q

Maude> reduce in META-LEVEL :
           metaPrettyPrint(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['q.Coin, '__['q.Coin, 'q.Coin]]],
             mixfix format) .
reduce in META-LEVEL : metaPrettyPrint(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]], mixfix format) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result NeTypeList: '\r '\! '$ '\o '\r '\! 'q '\o '\r '\! 'q '\o '\r '\! 'q '\o

Maude> reduce in META-LEVEL :
           metaPrettyPrint(upModule('VENDING-MACHINE, false),
             '__['$.Coin, '__['q.Coin, '__['q.Coin, 'q.Coin]]]) .
reduce in META-LEVEL : metaPrettyPrint(upModule('VENDING-MACHINE, false), '__[
    '$.Coin,'__['q.Coin,'__['q.Coin,'q.Coin]]]) .
rewrites: 3 in 0ms cpu (0ms real) (~ rewrites/second)
result NeTypeList: '\r '\! '$ '\o '\r '\! 'q '\o '\r '\! 'q '\o '\r '\! 'q '\o
)
