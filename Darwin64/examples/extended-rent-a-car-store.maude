---- from the book All About Maude
---- from the Maude Manual
---- by the Maude team

load view-oid.maude
load view-cid.maude
load view-tuple2.maude
load pfun.maude

omod EXTENDED-RENT-A-CAR-STORE is
  pr PFUN{Tuple{Cid, Cid}, Int} .
  pr PFUN{Cid, Int} .
  pr PFUN{Oid, Int} .
  pr SET{Oid} .
  pr QID .
  subsort Qid < Oid .
  class Calendar | date : Int .
  class Store |
    discounts : PFun{Tuple{Cid, Cid}, Int},
    payments  : PFun{Oid, Int},
    penalty   : Int,
    threshold : Int,
    suspended : Set{Oid},
    rates     : PFun{Cid, Int},
    customers : Set{Oid},
    cars      : Set{Oid},
    rentals   : Set{Oid},
    calendar  : Oid .

  class Customer | cash : Int, debt : Int .
  class Staff .
  class OccasionalCust .
  class PreferredCust .
  subclasses OccasionalCust PreferredCust Staff < Customer .

  class Car | available : Bool .
  class EconomyCar .
  class MidSizeCar .
  class FullSizeCar .
  subclasses EconomyCar MidSizeCar FullSizeCar < Car .

  class Rental |
    deposit    : Int,  discount   : Int,
    dueDate    : Int,  pickUpDate : Int,
    rate       : Int,  customer   : Oid,
    car        : Oid .

  vars M N F Ppdt Ddt Today NumDays Amnt Rt Dscnt Thrshld Dpst Pnlt : Int .
  vars O U I V C A : Oid .
  vars US IS SS RS : Set{Oid} .
  var  Dscnts : PFun{Tuple{Cid, Cid}, Int} .
  var  Rts : PFun{Cid, Int} .
  var  Pmnts : PFun{Oid, Int} .

  rl [new-day] :
    < O : Calendar | date : F >
    => < O : Calendar | date : F + 1 > .

  crl [car-rental] :
    < U : Customer | cash : M >
    < I : Car | available : true >          *** the car is available
    < V : Store | suspended : US, rates : Rts, discounts : Dscnts,
      calendar : C, cars : (I, IS), customers : (U, SS), rentals : RS >
    < C : Calendar | date : Today >
    => < U : Customer | cash : M + - Amnt >
        < I : Car | available : false >
        < V : Store | rentals : (A, RS) >
        < C : Calendar | >
        < A : Rental | pickUpDate : Today, dueDate : Today + NumDays, car : I,
          deposit : Amnt, customer : U, rate : Rt, discount : Dscnt >
    if not U in US                            *** the customer is not suspended
        /\ Rt := Rts[getClass(< I : Car | >)]
        /\ Dscnt := Dscnts[(getClass(< U : Customer | >), getClass(< I : Car | >))]
        /\ Amnt := (Rt + - Dscnt) * NumDays
        /\ M >= Amnt                         *** enough cash to make a deposit
    [nonexec] .

  crl [on-date-car-return] :
    < U : Customer | cash : M >
    < I : Car | >
    < A : Rental | customer : U, car : I, rate : Rt, discount : Dscnt,
      pickUpDate : Ppdt, dueDate : Ddt, deposit : Dpst >
    < V : Store | payments : Pmnts, cars : (I, IS), customers : (U, SS),
      calendar : C, rentals : (A, RS) >
    < C : Calendar | date : Today >
    => < U : Customer | cash : M + Dpst + - Amnt >
        < I : Car | available : true >
        < V : Store | rentals : RS,
          payments : (if Pmnts[U] == undefined *** no record for this customer
                      then Pmnts[U -> Amnt]
                      else Pmnts[U -> ((Pmnts[U]) + Amnt)]
                      fi) >
        < C : Calendar | >
    if (Today <= Ddt) /\ Amnt := (Rt + - Dscnt) * (Today + - Ppdt) .

  crl [late-car-return] :
    < U : Customer | debt : M >
    < I : Car | >
    < A : Rental | customer : U, car : I, rate : Rt, discount : Dscnt,
      pickUpDate : Ppdt, dueDate : Ddt, deposit : Dpst >
    < V : Store | payments : Pmnts, penalty : Pnlt, rentals : (A, RS),
      cars : (I, IS), customers : (U, SS), calendar : C >
    < C : Calendar | date : Today >
    => < U : Customer | debt : M + Amnt + - Dpst >
        < I : Car | available : true >
        < V : Store | rentals : RS,
          payments : (if Pmnts[U] == undefined
                      then Pmnts[U -> Dpst]
                      else Pmnts[U -> ((Pmnts[U]) + Dpst)]
                      fi) >
        < C : Calendar | >
    if Ddt < Today                          *** it is returned late
        /\ Amnt := ((Rt + - Dscnt) * (Ddt + - Ppdt))
              + ((((Rt + - Dscnt) * (Today + - Ddt)) * (100 + Pnlt)) quo 100) .

  crl [pay-debt] :
    < V : Store | payments : Pmnts, customers : (U, SS), calendar : C >
    < U : Customer | debt : M, cash : N >
    < C : Calendar | date : Today >
    => < V : Store | payments : Pmnts[U -> ((Pmnts[U]) + Amnt)] >
        < U : Customer | debt : M + - Amnt, cash : N + - Amnt >
        < C : Calendar | >
    if 0 < Amnt /\ Amnt <= N /\ Amnt <= M
    [nonexec] .

  crl [suspend-late-payers] :
    < V : Store | suspended : US, customers : (U, SS) >
    < U : Customer | debt : M >
    => < V : Store | suspended : (U, US) >
        < U : Customer | >
    if (not U in US) and M > 0 .

  crl [suspend-late-returns] :
    < V : Store | suspended : US, cars : (I, IS),
                  customers : (U, SS), calendar : C >
    < U : Customer | >
    < I : Car | >
    < A : Rental | customer : U, car : I, dueDate : F >
    < C : Calendar | date : Today >
    => < V : Store | suspended : (U, US) >
        < U : Customer | >
        < I : Car | >
        < A : Rental | >
        < C : Calendar | >
    if (not U in US) and F < Today .

  crl [upgrade-to-preferred] :
    < U : OccasionalCust | cash : M, debt : N >
    < V : St:Store | threshold : Thrshld, payments : Pmnts,
                     customers : (U, SS), calendar : C, Atts:AttributeSet >
    < C : Ca:Calendar | date : Today, Atts':AttributeSet >
    => < U : PreferredCust | cash : M, debt : N >
       < V : St:Store | threshold : Thrshld, payments : Pmnts,
                        customers : (U, SS), calendar : C, Atts:AttributeSet >
       < C : Ca:Calendar | date : Today, Atts':AttributeSet >
    if (Pmnts[U]) >= Thrshld
    [dnt] .
endom
