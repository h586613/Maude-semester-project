mod UNIF-VENDING-MACHINE is
  sorts Coin Item Marking Money State .
  subsort Coin < Money .
  op empty : -> Money .
  op __ : Money Money -> Money [assoc comm id: empty] .
  subsort Money Item < Marking .
  op __ : Marking Marking -> Marking [assoc comm id: empty] .
  op <_> : Marking -> State .
  ops $ q : -> Coin .
  ops a c : -> Item .
  var M : Marking .
  rl [buy-c] : < M $ > => < M c > .
  rl [buy-a] : < M $ > => < M a q > .
  eq [change] : q q q q = $ [variant] .
endm

unify in UNIF-VENDING-MACHINE :
   < q q X:Marking > =? < $ Y:Marking > .
irredundant unify in UNIF-VENDING-MACHINE :
   < q q X:Marking > =? < $ Y:Marking > .

mod UNIF-VENDING-MACHINE-MB is
  sorts Coin Item Marking Money State .
  subsort Coin < Money .
  op empty : -> Money .
  op __ : Money Money -> Money [assoc comm id: empty] .
  subsort Money Item < Marking .
  op __ : Marking Marking -> Marking [assoc comm id: empty] .
  op <_> : Marking -> State .
  ops $ q : -> Coin .
  ops a c : -> Item .
  sort Quarter .
  subsort Quarter < Coin .
  mb q : Quarter .
  var M : Marking .
  rl [buy-c] : < M $ > => < M c > .
  rl [buy-a] : < M $ > => < M a q > .
  eq [change]: q q q q = $ [variant] .
endm

unify in UNIF-VENDING-MACHINE-MB :
< q q X:Marking > =? < $ Y:Quarter Z:Quarter > .
