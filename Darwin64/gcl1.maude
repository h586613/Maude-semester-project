*** maude demo hvl march 2024

fmod VAR is
    including QID .
    sort Var .
    subsort Qid < Var .    *** 'string
endfm

view Var from TRIV to VAR is
   sort Elt to Var .
endv

fmod EXPR is
    pr VAR .
    pr BOOL .
    pr INT .

    sorts Val Expr .
    subsorts Bool Int < Val .
    subsorts Var Val < Expr .
    
    op _+_ : Expr Expr -> Expr [ditto] .
    op _*_ : Expr Expr -> Expr [ditto] .
    op _=:=_ : Expr Expr -> Expr [prec 25] . --- equality
    op _<_ : Expr Expr -> Expr [ditto] .
    op not_ : Expr -> Expr [ditto] .
    op _and_ : Expr Expr -> Expr [ditto] .
    op _or_ : Expr Expr -> Expr [ditto] .
    
endfm

view Val from TRIV to EXPR is
    sort Elt to Val .
endv

fmod STATE is
    pr VAR .
    pr EXPR .
    pr MAP{Var, Val} .

    sort Substitution .
    subsort Map{Var, Val} < Substitution .
endfm

fmod EVAL is
    pr EXPR .
    pr STATE .

    var M : Substitution .
    var N : Int .
    var B : Bool .
    var V : Var .
    vars E1 E2 : Expr .
    
    op eval : Substitution Expr -> Val .
    *** Observe we are assuming that expressions are type-correct,
    *** otherwise reduction will get stuck.
    eq eval(M, N) = N .
    eq eval(M, B) = B .
    eq eval(M, V) = M[V] .

    eq eval(M, E1 + E2) = eval(M, E1) + eval(M, E2) .
    eq eval(M, E1 * E2) = eval(M, E1) * eval(M, E2) .

    eq eval(M, E1 =:= E2) = eval(M, E1) == eval(M, E2) .
    eq eval(M, E1 < E2) = eval(M, E1) < eval(M, E2) .
    eq eval(M, E1 and E2) = eval(M, E1) and eval(M, E2) .
    eq eval(M, E1 or E2) = eval(M, E1) or eval(M, E2) .
    eq eval(M, not(E1)) = not(eval(M, E1)) .
	    
endfm

*** red eval(empty, 5).
*** red eval('x |-> 5, 'x + 2) .
*** red eval(('x |-> 5, 'y |-> 7), 'y * ('x + 2)) .
*** red eval(('x |-> 5, 'y |-> 7), 'y < ('x + 2)) .
*** red eval(('x |-> 5, 'y |-> 7), 'y < ('x + 3)) .
*** red eval(('x |-> true, 'y |-> false), 'y or 'x) .
*** red eval(('x |-> true, 'y |-> false), 'y or true) .
*** red eval(('x |-> true, 'y |-> false), false or (true and 'x)) .
*** red eval(('x |-> true, 'y |-> false), true and 'x) .
